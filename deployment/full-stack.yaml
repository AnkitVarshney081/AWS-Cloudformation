# Parameters to be entered by the users while creating the stack
Parameters: 

  ApplicationName: 
    Description: Name of your application/project 
    Type: String 

  VpcName:
    Description: Name for your VPC 
    Type: String

  KeyName: 
    Description: Key Pair name to connect to take console login 
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be a name of existing KeyPair
  
  PublicInstanceType: 
    Description: Choose the Public Instance Type 
    Type: String 
    Default: t2.micro 
    AllowedValues: 
    - t2.micro
    - t2.small
    ConstraintDescription: Must be valid instance type 
  PrivateInstanceType: 
    Description: Choose the Private Instance Type 
    Type: String 
    Default: t2.micro 
    AllowedValues: 
    - t2.micro
    - t2.small
    ConstraintDescription: Must be valid instance type 
 

#### #################################### ####
####              RESOURCES               ####        
#### #################################### ####
Resources: 

  # Create a VPC with CIDR block range 
  CustomVPC:
    Type: AWS::EC2::VPC 
    Properties: 
      CidrBlock: '10.0.0.0/16'
      Tags: 
        - Key: Name 
          Value: !Ref VpcName

  # Create Internet Gateway for your public subnet 
  InternetGateway: 
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name 
          Value: !Sub '${VpcName}-IGW'

  # Attach the above IGW with your VPC 
  InternetGatewayAttach: 
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref CustomVPC

  ############ Public Subnet for your VPC ############
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref CustomVPC
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      CidrBlock: '10.0.0.0/24'
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name 
          Value: !Sub '${VpcName}-Public-Subnet'
  # Route table for this public subnet 
  PublicRouteTable: 
    Type: AWS::EC2::RouteTable 
    Properties: 
      VpcId: !Ref CustomVPC
      Tags: 
        - Key: Name 
          Value: !Sub '${VpcName}-Public-RT'
  # Add a route for 0.0.0.0/0 to your IGW in this route table 
  PublicRoute: 
    Type: AWS::EC2::Route 
    DependsOn: InternetGatewayAttach
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  # Associate this route table to your public subnet 
  PublicSubnetRouteTableAssociation: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  
  ############ Private Subnet for your VPC ############
  PrivateSubnet: 
    Type: AWS::EC2::Subnet 
    Properties: 
      VpcId: !Ref CustomVPC 
      AvailabilityZone: 
        Fn::Select: 
          - 0 
          - Fn::GetAZs: ""
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: false 
      Tags: 
        - Key: Name 
          Value: !Sub '${VpcName}-Private-Subnet'
  # Create a NAT Gateway for your private route to connect to internet 
  # NAT gateway needs an EIP to represent your private subnet to the world 
  NatElasticIP: 
    Type: AWS::EC2::EIP 
    # We want it to be created only when the VPC is created 
    DependsOn: CustomVPC
    Properties: 
      Domain: vpc 
  # Create NAT in public subnet and assign above IP to it
  NatGateway: 
    Type: AWS::EC2::NatGateway
    # NatGateway will only be created AFTER creation of NatElasticIP
    DependsOn: NatElasticIP 
    Properties: 
      AllocationId: !GetAtt NatElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags: 
        - Key: Name 
          Value: !Sub '${VpcName}-NAT'
  # Route table for your private subnet 
  PrivateRouteTable: 
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref CustomVPC
      Tags: 
        - Key: Name 
          Value: !Sub '${VpcName}-Private-RT'
  # Add route to this which says 0.0.0.0/0 to be communicated via NAT 
  PrivateRoute: 
    Type: AWS::EC2::Route 
    DependsOn: NatGateway
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NatGateway
  # Associate the route table with private subnet
  PrivateSubnetRouteTableAssociation: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  ############## Infrastructure Resources ###############

  PublicInstanceSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow public SSH and port 80 access
      ## Ingress === inbound rules 
      SecurityGroupIngress: 
          - FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
            IpProtocol: tcp 
          - FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
            IpProtocol: tcp
      VpcId:
        Ref: !CustomVPC