# Parameters to be entered by the users while creating the stack
Parameters: 

  ApplicationName: 
    Description: Name of your application/project 
    Type: String 

  VpcName:
    Description: Name for your VPC 
    Type: String

  KeyName: 
    Description: Key Pair name to connect to take console login 
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be a name of existing KeyPair
  
  ######## Public EC2 instance ########
  PublicInstanceType: 
    Description: Choose the Public Instance Type 
    Type: String 
    Default: t2.micro 
    AllowedValues: 
    - t2.micro
    - t2.small
    ConstraintDescription: Must be valid instance type 
  PublicImageId:
    Description: Image ID for base Public EC2 instance
    Type: AWS::EC2::Image::Id
    Default: ami-9be6f38c

  ######## Private EC2 instance ########
  PrivateInstanceType: 
    Description: Choose the Private Instance Type 
    Type: String 
    Default: t2.micro 
    AllowedValues: 
    - t2.micro
    - t2.small
    ConstraintDescription: Must be valid instance type 
  PrivateImageId:
    Description: Image ID for base Private EC2 instance
    Type: AWS::EC2::Image::Id
    Default: ami-9be6f38c
 

#### #################################### ####
####              RESOURCES               ####        
#### #################################### ####
Resources: 

  # Create a VPC with CIDR block range 
  CustomVPC:
    Type: AWS::EC2::VPC 
    Properties: 
      CidrBlock: '10.0.0.0/16'
      Tags: 
        - Key: Name 
          Value: !Ref VpcName

  # Create Internet Gateway for your public subnet 
  InternetGateway: 
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name 
          Value: !Sub '${VpcName}-IGW'

  # Attach the above IGW with your VPC 
  InternetGatewayAttach: 
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref CustomVPC

  ############ Public Subnet for your VPC ############
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref CustomVPC
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      CidrBlock: '10.0.0.0/24'
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name 
          Value: !Sub '${VpcName}-Public-Subnet'
  # Route table for this public subnet 
  PublicRouteTable: 
    Type: AWS::EC2::RouteTable 
    Properties: 
      VpcId: !Ref CustomVPC
      Tags: 
        - Key: Name 
          Value: !Sub '${VpcName}-Public-RT'
  # Add a route for 0.0.0.0/0 to your IGW in this route table 
  PublicRoute: 
    Type: AWS::EC2::Route 
    DependsOn: InternetGatewayAttach
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  # Associate this route table to your public subnet 
  PublicSubnetRouteTableAssociation: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  
  ############ Private Subnet for your VPC ############
  PrivateSubnet: 
    Type: AWS::EC2::Subnet 
    Properties: 
      VpcId: !Ref CustomVPC 
      AvailabilityZone: 
        Fn::Select: 
          - 0 
          - Fn::GetAZs: ""
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: false 
      Tags: 
        - Key: Name 
          Value: !Sub '${VpcName}-Private-Subnet'
  # Create a NAT Gateway for your private route to connect to internet 
  # NAT gateway needs an EIP to represent your private subnet to the world 
  NatElasticIP: 
    Type: AWS::EC2::EIP 
    # We want it to be created only when the VPC is created 
    DependsOn: CustomVPC
    Properties: 
      Domain: vpc 
  # Create NAT in public subnet and assign above IP to it
  NatGateway: 
    Type: AWS::EC2::NatGateway
    # NatGateway will only be created AFTER creation of NatElasticIP
    DependsOn: NatElasticIP 
    Properties: 
      AllocationId: !GetAtt NatElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags: 
        - Key: Name 
          Value: !Sub '${VpcName}-NAT'
  # Route table for your private subnet 
  PrivateRouteTable: 
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref CustomVPC
      Tags: 
        - Key: Name 
          Value: !Sub '${VpcName}-Private-RT'
  # Add route to this which says 0.0.0.0/0 to be communicated via NAT 
  PrivateRoute: 
    Type: AWS::EC2::Route 
    DependsOn: NatGateway
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NatGateway
  # Associate the route table with private subnet
  PrivateSubnetRouteTableAssociation: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  #### #################################### ####
  ####       Infrastructure Resources       ####
  #### #################################### ####

  PublicInstanceSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow public SSH and port 80 access
      ## Ingress === inbound rules 
      SecurityGroupIngress: 
          - FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
            IpProtocol: tcp 
          - FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
            IpProtocol: tcp
      VpcId:
        Ref: !CustomVPC
  
  ############# Launch Template #############
  PublicLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub '${ApplicationName}-Public-LT'
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !GetAtt PublicInstanceSecurityGroup.GroupId 
            DeleteOnTermination: true
        Placement: 
          Tenancy: default 
        ImageId: #### To be reffered via EC2 instance AMI ####
        InstanceType: !Ref PublicInstanceType
        KeyName: !Ref KeyName

  # Creating AMI using custom EC2
  # Completes when the instance is fully provisioned and ready for AMI creation.
  AMICreate:
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M

  PublicInstance: 
    Type: AWS::EC2::Instance 
    Properties: 
      ImageId: !Ref PublicImageId
      InstanceType: !Ref PublicInstanceType
      UserData: 
        "Fn::Base64": !Sub |
          #!/bin/bash -x
          touch test_file 
          ### this is a notification to tell above steps have been completed ###
          /opt/aws/bin/cfn-signal \
            -e $? \
            --stack ${AWS::StackName} \
            --region ${AWS::Region} \
            --resource AMICreate 
          shutdown -h now
    
    AMI:
      Type: Custom::AMI
      DependsOn: AMICreate
      Properties:
        ## Using a custom Lambda funciton to create an AMI 
        ServiceToken: !GetAtt AMIFunction.Arn ## how to create 
        InstanceId: !Ref PublicInstance ## which instance to use 

    ## Lambda function to create the AMI
    AMIFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          var response = require('cfn-response');
          var AWS = require('aws-sdk');
          exports.handler = function(event, context) {
            console.log("Request received:\n", JSON.stringify(event));
            var physicalId = event.PhysicalResourceId;
            function success(data) {
              return response.send(event, context, response.SUCCESS, data, physicalId);
            }
            function failed(e) {
              return response.send(event, context, response.FAILED, e, physicalId);
            }
            // Call ec2.waitFor, continuing if not finished before Lambda function timeout.
            function wait(waiter) {
              console.log("Waiting: ", JSON.stringify(waiter));
              event.waiter = waiter;
              event.PhysicalResourceId = physicalId;
              var request = ec2.waitFor(waiter.state, waiter.params);
              setTimeout(()=>{
                request.abort();
                console.log("Timeout reached, continuing function. Params:\n", JSON.stringify(event));
                var lambda = new AWS.Lambda();
                lambda.invoke({
                  FunctionName: context.invokedFunctionArn,
                  InvocationType: 'Event',
                  Payload: JSON.stringify(event)
                }).promise().then((data)=>context.done()).catch((err)=>context.fail(err));
              }, context.getRemainingTimeInMillis() - 5000);
              return request.promise().catch((err)=>
                (err.code == 'RequestAbortedError') ?
                  new Promise(()=>context.done()) :
                  Promise.reject(err)
              );
            }
            var ec2 = new AWS.EC2(),
                instanceId = event.ResourceProperties.InstanceId;
            if (event.waiter) {
              wait(event.waiter).then((data)=>success({})).catch((err)=>failed(err));
            } else if (event.RequestType == 'Create' || event.RequestType == 'Update') {
              if (!instanceId) { failed('InstanceID required'); }
              ec2.waitFor('instanceStopped', {InstanceIds: [instanceId]}).promise()
              .then((data)=>
                ec2.createImage({
                  InstanceId: instanceId,
                  Name: event.RequestId
                }).promise()
              ).then((data)=>
                wait({
                  state: 'imageAvailable',
                  params: {ImageIds: [physicalId = data.ImageId]}
                })
              ).then((data)=>success({})).catch((err)=>failed(err));
            } else if (event.RequestType == 'Delete') {
              if (physicalId.indexOf('ami-') !== 0) { return success({});}
              ec2.describeImages({ImageIds: [physicalId]}).promise()
              .then((data)=>
                (data.Images.length == 0) ? success({}) :
                ec2.deregisterImage({ImageId: physicalId}).promise()
              ).then((data)=>
                ec2.describeSnapshots({Filters: [{
                  Name: 'description',
                  Values: ["*" + physicalId + "*"]
                }]}).promise()
              ).then((data)=>
                (data.Snapshots.length === 0) ? success({}) :
                ec2.deleteSnapshot({SnapshotId: data.Snapshots[0].SnapshotId}).promise()
              ).then((data)=>success({})).catch((err)=>failed(err));
            }
          };
      Runtime: nodejs4.3
      Timeout: 300
  